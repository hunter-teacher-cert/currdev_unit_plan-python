4.1 Loops
# Introduction
In this lesson, students learn about loops. 
The students will:
Be able to define and code while loops and loop control variables 
Components:
Video Lesson
Lesson Practice
Code Practice
What to Emphasize:
The loop control variable must have an opportunity to be changed in a while loop in order for the while loop to end. If the control variable never changes, the loop will be infinite.
The formatting for a while loop is the same as an if statement, where there needs to be a colon after the condition and the code to be executed should be indented underneath.
Additional Notes:
The Viz Mode can be beneficial to help students see how a variable changes throughout a program. This helps them trace through the program and identify where an error may have occurred.
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3B-AP-14




4.7 For Loops
# Introduction
This lesson introduces the for loop, which is a type of count loop that uses the range function to set the value of the loop control variable. 
The students will:
Be able to define and code for loops
Learn when to use a for loop rather than a while loop
Components:
Video Lesson
Lesson Practice
Code Practice (2)
What to Emphasize:
For loops are used only when you know exactly how many times you want the loop to run.
Additional Notes:
Having students create a while AND a for loop that do the same thing can be helpful. Seeing them side-by-side helps to show how each can use a count variable, but in slightly different ways.
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3A-AP-18

4.8 Counting by Other Than 1
# Introduction
This lesson explores how a for loop uses parameters to count by numbers other than 1. 
The students will:
Code for loops with control variables that increase or decrease by amounts other than 1
Components:
Video Lesson
Lesson Practice
Code Practice (3)
What to Emphasize:
Although a for loop will run a set amount of times, you are still allowed to get user input inside of the loop.
Typically a for loop looks neater in a program because it requires a few less lines of code.
Additional Notes:
A for loop in other languages like C++ or Javascript look slightly different: for( i = 0; i < 10; i + 2). Even though this looks different, the parts of the for loop are the same. There is a starting point (i = 0), and ending point (i < 10) and how we count (i+2).
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3A-AP-18
 
4.9 Summing
# Introduction
In this lesson, students will learn about summing using a for loop. 
The students will:
Be able to use a for loop with a sum variable to sum a set of variables
Components:
Video Lesson
Lesson Practice
Code Practice (4)
What to Emphasize:
The order of your code is very important inside of a loop. If you find that the output is off a little, but the code looks correct, trace through the code and you may see that some lines of code just need to be switched or moved around.
When using a sum variable, it normally is initialized to 0 before the loop begins. If you do not first initialize it as something, how can you add to it?
Additional Notes:
A variable is initialized whenever it is first assigned a value. However, you cannot use a variable on the right side of an assignment without it first being assigned a value. Ex: x = input(“Name: “) is fine to use even if x is not yet defined, because it is on the left side of the assignment. Ex: x = 4 * r is not okay if r has not yet been initialized - how can I multiply by something I do not know the value of?
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3A-AP-18

4.10 Review of Algorithms and Tracing
# Introduction
This lesson recalls the lesson on algorithms and code tracing from Unit 3.
The students will:
Be able to define algorithms and code tracing
Be able to explain techniques for tracing code, and successfully trace code to determine behavior and outputs
Components:
Video Lesson
Lesson Practice
What to Emphasize:
In order to understand what is happening in a specific algorithm or program, we trace the code and follow each variable and track how that variable is changing and what it should be doing.
Adding comments into the code to help explain what each step is doing can be helpful during code tracing
Additional Notes:
Even though we are trying to “break” our code with different input values, at this point in time, students do not know how to properly make code work if they enter a string when an integer is expected or a float when an integer is expected. However, if we are expecting a string, checking to make sure a single word works, two words, long and short words, no words, etc.
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3A-CS-03

4.11 Modeling and Simulation
# Introduction
In this lesson, students learn how computer models and computer simulations can help predict and test real-world situations. 
The students will:
Be able to define computer models and simulations and explain why these are used
Be able to explain the two key features used to create simulations
Components:
Video Lesson
Lesson Practice
What to Emphasize:
A computer model is used to replicate a phenomenon in the world and a simulation is running the model repeatedly while changing variables to predict what will happen in the future.
Most simulations will use random numbers and large scale repetition
Additional Notes:
Modeling and simulation is a staple in all areas. Some reasons to use simulations and modeling is when the real testing is not feasible because of money, safety, time or technology.
If you'd like to customize the lesson slides, click here.
Curricular Standards
This lesson adheres to the following CSTA Standards: 3A-AP-17
